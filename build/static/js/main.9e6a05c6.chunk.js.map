{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","color","backgroundColor","padding","textAlign","linkStyle","textDecoration","Header","style","to","AddTodo","state","title","onSubmit","e","preventDefault","props","addTodo","setState","onChange","target","name","value","this","display","type","placeholder","flex","className","Component","TodoItem","getStyle","borderBottom","todo","completed","markComplete","console","log","id","bind","onClick","delTodo","btnStyle","border","cursor","borderRadius","float","Todos","todos","map","key","About","Fragment","App","filter","newTodo","uuid","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e6a05c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todo List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    color: \"white\",\r\n    backgroundColor: \"black\",\r\n    padding: \"10px\",\r\n    textAlign: \"center\"\r\n}\r\n\r\nconst linkStyle = {\r\n    color: \"white\",\r\n    textDecoration: \"none\",\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: \"\"\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: \"\" });\r\n    }\r\n\r\n    onChange = (e) => this.setState({\r\n        [e.target.name]:\r\n        e.target.value\r\n    });\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n\r\n                <input type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Add New Todo...\"\r\n                    style={{ flex: \"10\", padding: \"5px\" }}\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n\r\n                <input type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style={{ flex: \"1\" }} />\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass TodoItem extends Component {\r\n    // STYLE THE ADDs TODO ITEM, A\r\n    getStyle = () => {\r\n        return {\r\n            backgroundColor: \"lightyellow\",\r\n            borderBottom: \"1px solid black\",\r\n            padding: \"10px\",\r\n            textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n        }\r\n    }\r\n\r\n\r\n    //  FUNCTION TO MARK COMPLETED TODO ITEM WITH LINETHROUGH ONCE CHECKED IN THE BOX\r\n    markComplete = (e) => {\r\n        console.log(this.props)\r\n    }\r\n\r\n    // NORMAL TODO ITEMS\r\n    render() {\r\n        // DESTRUCTURE THE THIS.PROPS TO GET ITS ID, ITEM AND OTHER\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <h3>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\r\n                    {\" \"}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\r\n                </h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// PROPTYPES\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\n// STYLE THE DELETE BUTTON\r\nconst btnStyle = {\r\nbackgroundColor: \"black\",\r\ncolor: \"white\",\r\nborder: \"none\",\r\ncursor: \"pointer\",\r\nborderRadius: \"50%\",\r\npadding: \"7px 10px\",\r\nfloat: \"right\"\r\n}\r\n// _________________________________________\r\n// STYLING AND HOW TO WRITE IT\r\n// <div style={itemStyle}>\r\n// const itemStyle = {\r\n// backgroundColor: \"lightyellow\"\r\n// }\r\n\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  markComplete = () => {\r\n    console.log(\"anu nairis\")\r\n  }\r\n\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\n\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is some React Crash Coure from Youtube, help</p>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nAbout.propTypes = {\r\n\r\n};\r\n\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\n\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport Todos from \"./components/Todos\";\nimport uuid from 'react-uuid';\n\n\nimport About from \"./components/pages/About\";\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  // TOGGLE THE TICK AND TODO LIST AS COMPLETE\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo;\n      })\n    })\n  }\n\n  // DELETE BUTTON\n  delTodo = (id) => {\n    console.log(\"just deleted\")\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    });\n  }\n\n  // ADD THE TODO TO THE LIST\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  }\n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n\n            <Header />\n\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos\n                  todos={this.state.todos}\n                  markComplete={this.markComplete}\n                  delTodo={this.delTodo} />\n              </React.Fragment>\n            )} />\n\n            <Route path=\"/about\" component={About} />\n\n          </div>\n        </div >\n      </Router>\n    );\n  }\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}